import telebot
import logging
from config import TELEGRAM_TOKEN
from spotify_api import get_spotify_playlist_tracks, get_spotify_client
from audio_fetcher import download_audio
import os
import time
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import re
from threading import Thread  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename='bot.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

bot = telebot.TeleBot(TELEGRAM_TOKEN)
user_quality = {}  # –ö–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_auth_managers = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ auth_manager –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("/start"))
    keyboard.add(KeyboardButton("/help"))
    keyboard.add(KeyboardButton("/auth"))
    keyboard.add(KeyboardButton("/quality"))
    return keyboard

@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = (
        "üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç—Ä–µ–∫–æ–≤ –∏–∑ Spotify –≤ Telegram.\n"
        "–ù–∞–∂–º–∏ /auth, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å Spotify (–ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å URL –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏).\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞!"
    )
    bot.reply_to(message, welcome_text, reply_markup=get_main_keyboard())
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "üìö **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞**:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/auth - –ü–æ–¥–∫–ª—é—á–∏—Ç—å Spotify (–≤—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π URL –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)\n"
        "/quality [128/192/320] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 192 kbps)\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç Spotify –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!"
    )
    bot.reply_to(message, help_text, reply_markup=get_main_keyboard())

@bot.message_handler(commands=['auth'])
def spotify_auth(message):
    user_id = message.from_user.id
    sp, auth_manager = get_spotify_client(user_id)
    auth_url = auth_manager.get_authorize_url()
    user_auth_managers[user_id] = auth_manager

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å Spotify", url=auth_url))
    bot.reply_to(message, "üîó –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å Spotify. –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ –ø–æ–ª–Ω—ã–π URL –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞!",
                 reply_markup=keyboard)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Spotify")

@bot.message_handler(func=lambda message: "code=" in message.text and message.from_user.id in user_auth_managers)
def handle_auth_code(message):
    user_id = message.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ URL —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    text = message.text.strip()
    match = re.search(r'code=([^&]+)', text)
    if match:
        code = match.group(1)
    else:
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ –≤ URL. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
        return
    
    auth_manager = user_auth_managers[user_id]
    try:
        auth_manager.get_access_token(code)
        bot.reply_to(message, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Spotify –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç.",
                     reply_markup=get_main_keyboard())
        del user_auth_managers[user_id]
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –≤ Spotify")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {user_id}: {str(e)}")

@bot.message_handler(commands=['quality'])
def set_quality(message):
    try:
        quality = message.text.split()[1]
        if quality in ['128', '192', '320']:
            user_quality[message.from_user.id] = quality
            bot.reply_to(message, f"üé∂ –ö–∞—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {quality} kbps", reply_markup=get_main_keyboard())
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∫–∞—á–µ—Å—Ç–≤–æ {quality} kbps")
        else:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏ –∫–∞—á–µ—Å—Ç–≤–æ: 128, 192 –∏–ª–∏ 320")
    except IndexError:
        keyboard = InlineKeyboardMarkup()
        keyboard.row(
            InlineKeyboardButton("128 kbps", callback_data="quality_128"),
            InlineKeyboardButton("192 kbps", callback_data="quality_192"),
            InlineKeyboardButton("320 kbps", callback_data="quality_320")
        )
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏ –∫–∞—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –Ω–∏–∂–µ:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("quality_"))
def handle_quality_callback(call):
    user_id = call.from_user.id
    quality = call.data.split("_")[1]
    user_quality[user_id] = quality
    bot.edit_message_text(f"üé∂ –ö–∞—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {quality} kbps", call.message.chat.id, call.message.message_id,
                          reply_markup=None)
    bot.answer_callback_query(call.id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫–∞—á–µ—Å—Ç–≤–æ {quality} kbps —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def download_and_send_track(track, user_id, quality, chat_id, processed, track_count):
    progress = f"[{processed}/{track_count}] ({int(processed/track_count*100)}%)"
    bot.send_message(chat_id, f"‚¨áÔ∏è {progress} –°–∫–∞—á–∏–≤–∞—é: {track['name']} - {track['artist']}")
    try:
        audio_file = download_audio(track['name'], track['artist'], quality)
        with open(audio_file, 'rb') as audio:
            bot.send_audio(chat_id, audio, title=track['name'], performer=track['artist'])
        os.remove(audio_file)
        logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {track['name']} –¥–ª—è {user_id}")
    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {track['name']}: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {track['name']} –¥–ª—è {user_id}: {str(e)}")

@bot.message_handler(func=lambda message: "spotify.com/playlist" in message.text)
def handle_playlist(message):
    user_id = message.from_user.id
    bot.reply_to(message, "üéß –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–µ–π–ª–∏—Å—Ç–∞...", reply_markup=get_main_keyboard())
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–ª–µ–π–ª–∏—Å—Ç: {message.text}")
    
    try:
        tracks, playlist_name, track_count = get_spotify_playlist_tracks(message.text, user_id)
        if not tracks:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (/auth) –∏ –ø–ª–µ–π–ª–∏—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!")
            return
        
        quality = user_quality.get(user_id, "192")
        bot.send_message(message.chat.id, f"üìÄ –ü–ª–µ–π–ª–∏—Å—Ç: {playlist_name}\n–¢—Ä–µ–∫–æ–≤: {track_count}\n–ö–∞—á–µ—Å—Ç–≤–æ: {quality} kbps")
        
        threads = []
        processed = 0
        for track in tracks:
            processed += 1
            # –°–æ–∑–¥–∞—ë–º –ø–æ—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞
            thread = Thread(target=download_and_send_track, 
                            args=(track, user_id, quality, message.chat.id, processed, track_count))
            threads.append(thread)
            thread.start()
        
        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()
        
        bot.send_message(message.chat.id, f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ {playlist_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ {playlist_name} –¥–ª—è {user_id}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è {user_id}: {str(e)}")

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, "ü§î –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç Spotify –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!",
                 reply_markup=get_main_keyboard())

try:
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
    bot.polling()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")
    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")